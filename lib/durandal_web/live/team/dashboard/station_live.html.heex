<DurandalWeb.GameUIComponents.game_nav_bar
  selected="station"
  current_universe={@current_universe}
  current_team={@current_team}
  current_user={@current_user}
/>

<div class="row">
  <div class="col">
    <.card :if={@station}>
      <div class="float-end"></div>

      <h4 class="d-inline-block">
        {@station.name}
      </h4>

      <div class="row">
        <div class="col">
          <table class="table table-sm">
            <tbody>
              <tr>
                <td>System</td>
                <td>
                  {@station.system.name}
                </td>
              </tr>
              <tr>
                <td>Team</td>
                <td>
                  {@station.team.name}
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="col">
          <table class="table table-sm">
            <tbody>
              <tr>
                <td>Position</td>
                <td><.vector_string value={@station.position} /></td>
              </tr>
              <tr>
                <td>Velocity</td>
                <td><.vector_string value={@station.velocity} /></td>
              </tr>
            </tbody>
          </table>
        </div>

        <div :if={@station.orbiting} class="col">
          <table class="table table-sm">
            <tbody>
              <tr>
                <td>Orbiting</td>
                <td>{@station.orbiting.name}</td>
              </tr>
              <tr>
                <td>Distance</td>
                <td>
                  {Durandal.Engine.Maths.distance(@station.orbiting.position, @station.position)
                  |> abs
                  |> round
                  |> normalize}
                </td>
              </tr>
              <tr>
                <td>Clockwise?</td>
                <td>{@station.orbit_clockwise}</td>
              </tr>
              <tr>
                <td>Period</td>
                <td>{@station.orbit_period}</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </.card>
  </div>
</div>

<div class="col-md-12 px-4 py-1">
  <div
    class="btn btn-sm btn-secondary"
    id="show-modules-button"
    style="display: none"
    phx-click={JS.show(to: "#modules-column") |> JS.hide(to: "#show-modules-button")}
  >
    Show modules
  </div>

  <div
    class="btn btn-sm btn-secondary"
    id="show-docked-button"
    style="display: none"
    phx-click={JS.show(to: "#docked-column") |> JS.hide(to: "#show-docked-button")}
  >
    Show docked
  </div>

  <div
    class="btn btn-sm btn-secondary"
    id="show-cargo-button"
    style="display: none"
    phx-click={JS.show(to: "#cargo-column") |> JS.hide(to: "#show-cargo-button")}
  >
    Show cargo
  </div>
  &nbsp;
</div>

<div :if={@station} class="row mt-2">
  <div class="col" id="modules-column">
    <.card>
      <span
        class="btn btn-sm btn-secondary float-end"
        phx-click={
          JS.hide(to: "#modules-column")
          |> JS.show(to: "#show-modules-button", display: "inline-block")
        }
      >
        Hide
      </span>
      <h4>{gettext("Modules")}</h4>
      <.table id="modules" rows={@streams.station_modules} table_class="table-sm table-hover">
        <:col :let={{_id, module}} label="Name">{module.type.name}</:col>
        <:col :let={{_id, module}} label="Health">
          {module.health}/{module.type.max_health}
        </:col>
        <:col :let={{_id, module}} label="Build progress">
          <%= if module.build_progress >= module.type.build_time do %>
            100%
          <% else %>
            {module.build_progress} ({(module.build_progress / module.type.build_time * 100)
            |> :math.floor()
            |> round}%)
          <% end %>
        </:col>
      </.table>
    </.card>
  </div>

  <div class="col" id="docked-column">
    <.card>
      <span
        class="btn btn-sm btn-secondary float-end"
        phx-click={
          JS.hide(to: "#docked-column")
          |> JS.show(to: "#show-docked-button", display: "inline-block")
        }
      >
        Hide
      </span>
      <h4>{gettext("Docked ships")}</h4>
      <.table id="docked_ships" rows={@streams.docked_ships} table_class="table-sm table-hover">
        <:col :let={{_id, ship}} label="Name">{ship.type.name}</:col>
        <:col :let={{_id, ship}} label="Health">
          {ship.health}/{ship.type.max_health}
        </:col>
        <:col :let={{_id, ship}} label="Build progress">
          <%= if ship.build_progress >= ship.type.build_time do %>
            100%
          <% else %>
            {ship.build_progress} ({(ship.build_progress / ship.type.build_time * 100)
            |> :math.floor()
            |> round}%)
          <% end %>
        </:col>
        <:action :let={{_id, ship}}>
          <.link navigate={~p"/team/ship/#{ship}"} class="btn btn-sm btn-secondary">
            Show
          </.link>
        </:action>
      </.table>
    </.card>
  </div>

  <div class="col" id="cargo-column">
    <.card>
      <span
        class="btn btn-sm btn-secondary float-end"
        phx-click={
          JS.hide(to: "#cargo-column")
          |> JS.show(to: "#show-cargo-button", display: "inline-block")
        }
      >
        Hide
      </span>
      <h4>{gettext("Cargo")}</h4>
      <.table id="simple-resources-table" rows={@simple_cargo} table_class="table-sm table-hover">
        <:col :let={cargo} label="Simple">{@resource_types[cargo.type_id].name}</:col>
        <:col :let={cargo} label="Quantity">{format_number(cargo.quantity)}</:col>
        <:col :let={cargo} label="Mass">
          {format_number(cargo.quantity * @resource_types[cargo.type_id].mass)}
        </:col>
        <:col :let={cargo} label="Volume">
          {format_number(cargo.quantity * @resource_types[cargo.type_id].volume)}
        </:col>
      </.table>

      <.table
        id="composite-resources-table"
        rows={@composite_cargo}
        table_class="table-sm table-hover"
      >
        <:col :let={cargo} label="Composite">{cargo.type.name}</:col>
        <:col :let={cargo} label="Quantity">{format_number(cargo.quantity)}</:col>
        <:col :let={cargo} label="Approx mass">
          {format_number(round(cargo.quantity * cargo.averaged_mass))}
        </:col>
      </.table>
    </.card>
  </div>
</div>

<div class="row mt-1">
  <div class="col">
    <.card :if={@station}>
      <h4>Commands</h4>

      <.live_component
        id={:commands}
        module={DurandalWeb.Player.StationCommandListComponent}
        station={@station}
        commands={@station.commands}
        station_lookup={@station_lookup}
        system_object_lookup={@system_object_lookup}
        ship_type_lookup={@ship_type_lookup}
        station_module_type_lookup={@station_module_type_lookup}
      >
        <.live_component
          module={DurandalWeb.Player.StationCommandAddComponent}
          id={:command_add}
          subject={@station}
          command={
            %Durandal.Player.Command{
              team_id: @current_team.id,
              universe_id: @current_team.universe_id,
              user_id: @current_user.id,
              subject_id: @station.id,
              subject_type: "station",
              command_type: nil,
              contents: %{}
            }
          }
        />
      </.live_component>
    </.card>
  </div>
</div>
